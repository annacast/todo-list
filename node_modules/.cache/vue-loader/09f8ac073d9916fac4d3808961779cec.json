{"remainingRequest":"/Users/annacast/workspace/todo-list/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/annacast/workspace/todo-list/src/components/List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/annacast/workspace/todo-list/src/components/List.vue","mtime":1550252235000},{"path":"/Users/annacast/workspace/todo-list/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/annacast/workspace/todo-list/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/annacast/workspace/todo-list/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/annacast/workspace/todo-list/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Item from './Item.vue';\nexport default {\n  name: 'List',\n  data () {\n    return {\n      list: [{ text: 'Test item' }],\n      task: ''\n    }\n  },\n  computed: {\n    incomplete() {\n      return this.list.filter(this.pending).length;\n    }\n  },\n  components: { Item },\n  methods: {\n    addItem() {\n      if (this.task) {\n        this.list.push({\n          text: this.task,\n          completed: false\n        });\n        this.task = '';\n      }\n    },\n    removeItem(index) {\n      this.list.splice(index, 1)\n    },\n    completeItem(item) {\n      item.completed = !item.completed\n    },\n    clearCompleted() {\n      this.list = this.lists.filter(this.pending);\n    },\n    clearAll() {\n      this.lists = [];\n    },\n    pending(item) {\n      return !this.isCompleted(item);\n    },\n    isCompleted(item) {\n      return item.completed;\n    }\n  }\n}\n",{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"List.vue","sourceRoot":"src/components","sourcesContent":["<template id=\"list\">\n\t<section class=\"tasks\">\n    <h1>\n      To Do\n      <transition name=\"fade\">\n        <small v-if=\"incomplete\">({{ incomplete }})</small>\n      </transition>\n    </h1>\n    <div class=\"tasks__new input-group\">\n      <input\n        type=\"text\"\n        class=\"input-group-field\"\n        v-model=\"task\"\n        @keyup.enter=\"addItem\"\n        placeholder=\"New task\"\n      >\n      <span class=\"input-group-button\">\n        <button @click=\"addItem\" class=\"button\">\n          <i class=\"fa fa-plus\"></i> Add\n        </button>\n      </span>\n    </div>\n\n    <div class=\"tasks__clear button-group pull-right\">\n      <button\n        class=\"button warning small\"\n        @click=\"clearCompleted\"\n      >\n        <i class=\"fa fa-check\"></i> Clear Completed\n      </button>\n      <button class=\"button alert small\" @click=\"clearAll\">\n        <i class=\"fa fa-trash\"></i> Clear All\n      </button>\n    </div>\n\n    <transition-group name=\"fade\" tag=\"ul\" class=\"tasks__list no-bullet\">\n      <task-item\n        v-for=\"(item, index) in list\"\n        @remove=\"removeItem(index)\"\n        @complete=\"completeItem(item)\"\n        :item=\"item\"\n        :key=\"item\"\n      ></task-item>\n    </transition-group>\n  </section>\n</template>\n\n<script>\n  import Item from './Item.vue';\n  export default {\n    name: 'List',\n    data () {\n      return {\n        list: [{ text: 'Test item' }],\n        task: ''\n      }\n    },\n    computed: {\n      incomplete() {\n        return this.list.filter(this.pending).length;\n      }\n    },\n    components: { Item },\n    methods: {\n      addItem() {\n        if (this.task) {\n          this.list.push({\n            text: this.task,\n            completed: false\n          });\n          this.task = '';\n        }\n      },\n      removeItem(index) {\n        this.list.splice(index, 1)\n      },\n      completeItem(item) {\n        item.completed = !item.completed\n      },\n      clearCompleted() {\n        this.list = this.lists.filter(this.pending);\n      },\n      clearAll() {\n        this.lists = [];\n      },\n      pending(item) {\n        return !this.isCompleted(item);\n      },\n      isCompleted(item) {\n        return item.completed;\n      }\n    }\n  }\n</script>\n"]}]}